## =================== VERSION ===================
AWSTemplateFormatVersion: '2010-09-09'

## =================== DESCRIPTION ===================
Description: >-
  AWS CloudFormation template 
  Create an IAM user group and IAM users

## =================== PARAMETERS ===================
Parameters:
  Users:
    Description: Comma separated list of users to be created and added to the QHack Team group. Default password for all users - P@$$w0rd
    Type: String
    Default: UserA, UserB, UserC, UserD
  ServiceLinkedRole:
    Description: Whether to create service linked role for Amazon Braket. Choose true if you're working first time with Amazon Braket.
    Type: String
    AllowedValues:
      - true
      - false
  QPUAccess:
    Description: Whether to enable access to QPUs or not
    Type: String
    AllowedValues:
      - true
      - false
  BraketCostThreshold:
    Description: Braket cost threshold value after which all the submitted jobs and tasks will be cancelled
    Type: String
    Default: 500
  BillingAlertEmail:
    Description: An email address to send billing alerts
    Type: String
    Default: email@example.com

Conditions:
  isSLR: !Equals [ !Ref ServiceLinkedRole, true]
  isQPU: !Equals [ !Ref QPUAccess, false]
  
## =================== RESOURCES ===================
Resources:
  QHackTeamGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      GroupName: "QHackTeam" 
      Path: '/'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonBraketFullAccess 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/IAMUserChangePassword
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
  QHackTeamAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: TeamAdmin
      LoginProfile:
        Password: P@$$w0rd
        PasswordResetRequired: true
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: BraketCostAlarm
      AlarmDescription: A cloudwatch alarm that triggers if the Braket cost goes above threshold
      MetricName: Braket_Cost
      Namespace: Braket
      Statistic: Sum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: !Ref BraketCostThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions: 
        - !Ref BraketAlarmSnsTopic
  BraketAlarmSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref BillingAlertEmail
          Protocol: email
      TopicName: BillingAlarm
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub QHackCFNLambdaRole-${AWS::StackName}
      Description: Lambda function role to create IAM users
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonBraketFullAccess 
  UserAccessKeysTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: "Username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Username"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: UserAccessKeysTable
  BraketServiceLinkedRoleResource:
    Type: AWS::IAM::ServiceLinkedRole
    Condition: isSLR
    Properties:
      AWSServiceName: braket.amazonaws.com
      Description: Service role for Amazon Braket
  BraketNotebookInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      NotebookInstanceLifecycleConfigName: BraketLifecycleConfig
      OnStart:
      - Content:
          Fn::Base64: |
            #!/usr/bin/env bash

            set -e
            
            # OVERVIEW
            # This script stops a SageMaker notebook once it's idle for more than 1 hour (default time)
            # You can change the idle time for stop using the environment variable below.
            # If you want the notebook the stop only if no browsers are open, remove the --ignore-connections flag
            #
            # Note that this script will fail if either condition is not met
            #   1. Ensure the Notebook Instance has internet connectivity to fetch the example config
            #   2. Ensure the Notebook Instance execution role permissions to SageMaker:StopNotebookInstance to stop the notebook 
            #       and SageMaker:DescribeNotebookInstance to describe the notebook.
            #
            
            # PARAMETERS
            IDLE_TIME=3600
            
            echo "Fetching the autostop script"
            wget https://raw.githubusercontent.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/master/scripts/auto-stop-idle/autostop.py
            
            echo "Starting the SageMaker autostop script in cron"
            
            (crontab -l 2>/dev/null; echo "*/5 * * * * /usr/bin/python $PWD/autostop.py --time $IDLE_TIME --ignore-connections") | crontab -

            sudo -u ec2-user -i <<EOS
            TMPDIR=$(mktemp -d)
            cd "$TMPDIR"

            aws s3 cp s3://braketnotebookcdk-notebooklccs3bucketb3089b50-68b4kazkyfol/notebook/braket-notebook-lcc.zip braket-notebook-lcc.zip
            unzip braket-notebook-lcc.zip
            ./install.sh

            nohup rm -fr "$TMPDIR" &
            EOS

            exit 0
  ExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub AmazonBraketJobsExecutionRole-${AWS::StackName}
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "sagemaker.amazonaws.com"
              - "braket.amazonaws.com"
          Action: 
          - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonBraketFullAccess
        - arn:aws:iam::aws:policy/AmazonBraketJobsExecutionPolicy
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies: 
        - 
          PolicyName: "braket-notebook-policy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::amazon-braket-*
                  - arn:aws:s3:::braketnotebookcdk-*
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - braket:*
                Resource: "*"
  BraketNotebook:
    Type: AWS::SageMaker::NotebookInstance
    Properties: 
      DirectInternetAccess: Enabled
      InstanceType: ml.t3.medium
      NotebookInstanceName: !Sub amazon-braket-notebook-${AWS::StackName}
      RoleArn: !GetAtt ExecutionRole.Arn
      VolumeSizeInGB: 30
      LifecycleConfigName: !GetAtt BraketNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
  QPUAccessPolicy:
    Type: AWS::IAM::Policy
    Condition: isQPU
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            Action:
              - braket:CreateQuantumTask
              - braket:CancelQuantumTask
              - braket:GetQuantumTask
              - braket:SearchQuantumTasks
              - braket:GetDevice
              - braket:SearchDevices
            Resource: !Sub arn:aws:braket::${AWS::AccountId}:device/qpu/*
      PolicyName: QPUPolicy
      Roles:
        - !Ref ExecutionRole
  CustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt IAMUserCreatorLambda.Arn
      Users: !Ref Users
  BraketTerminatorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub BraketTerminator-${AWS::StackName}
      Description: Lambda function to terminate braket jobs and tasks if braket cost threshold is breached
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 15
      Code:
        ZipFile: !Sub |
          import json
          import boto3

          regions = ["us-east-1", "us-west-1", "us-west-2", "eu-west-2"]

          def get_running_jobs(braket):
              """Get all the Braket jobs for a region"""
              p = braket.get_paginator("search_jobs")
              paginator = p.paginate(filters=[]).build_full_result()
              print(paginator)
              return paginator
              
          def get_running_tasks(braket, values):
              """Gets Braket tasks for a region"""
              p = braket.get_paginator("search_quantum_tasks")
              paginator = p.paginate(filters=[{"name": "status", "operator": "EQUAL", "values": values}]).build_full_result()
              return paginator

          def cancel_task(braket, task):
              try:
                  response = braket.cancel_quantum_task(quantumTaskArn=task["quantumTaskArn"])
                  print(response)
              except Exception as e:
                  print(e)

          def cancel_job(braket, job):
              try:
                  response = braket.cancel_job(jobArn=job["jobArn"])
                  print(response)
              except Exception as e:
                  print(e)

          def lambda_handler(event, context):
              """Main lambda handler"""
              
              for region in regions:
                  braket = boto3.client("braket", region_name=region)
                  paginator = get_running_jobs(braket)
                  if "jobs" in paginator:
                      for job in paginator["jobs"]:
                          if job["status"] in ["RUNNING", "QUEUED"]:
                              cancel_job(braket, job)
                              
                  queued_tasks = get_running_tasks(braket, ["QUEUED"])
                  if "quantumTasks" in queued_tasks:
                      for task in queued_tasks["quantumTasks"]:
                          if task["status"] in ["RUNNING", "QUEUED"]:
                              cancel_task(braket, task)
                      
                  
                  running_tasks = get_running_tasks(braket, ["RUNNING"])
                  if "quantumTasks" in running_tasks:
                      for task in running_tasks["quantumTasks"]:
                          if task["status"] in ["RUNNING", "QUEUED"]:
                              cancel_task(braket, task)
  IAMUserCreatorLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - QHackTeamGroup
      - UserAccessKeysTable
    Properties:
      FunctionName: !Sub IAMUserCreatorFunction-${AWS::StackName}
      Description: Lambda function to create IAM users, add them to group and populate DynamoDB with their access keys
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 5
      Environment:
        Variables:
          DDB_TABLE: UserAccessKeysTable
          GROUP_NAME: QHackTeam
      Code:
        ZipFile: !Sub |
          import boto3, json
          import logging
          import cfnresponse
          import os
          import time

          logger = logging.getLogger(__name__)
          iam = boto3.client("iam")
          ddb = boto3.client("dynamodb")

          def create_iam_user(user):
              response = iam.create_user(
                  UserName=user
              )
              logger.info(response)
              if response['User']['Arn']:
                  return True
              else:
                  return False

          def create_iam_user_profile(user):
              response = iam.create_login_profile(
                  UserName=user,
                  Password='P@$$w0rd',
                  PasswordResetRequired=True
              )
              logger.info(response)
              if response['LoginProfile']:
                  return True
              else:
                  return False

          def create_iam_user_key(user):
              response = iam.create_access_key(
                  UserName=user
              )
              return response

          def put_ddb_item(item):
              response = ddb.put_item(
                  TableName=os.environ["DDB_TABLE"],
                  Item=item
              )
              logger.info(response)

          def get_ddb_items():
              response = ddb.scan(TableName=os.environ["DDB_TABLE"])
              print(response)
              return response

          def handler(event, context):
              logger.info(json.dumps(event))

              if event['RequestType'] == 'Create':
                  users = event['ResourceProperties']['Users']
                  users = users.split(",")
                  for user in users:
                      user = user.replace(" ", "")
                      if create_iam_user(user):
                          if create_iam_user_profile(user):
                              response = iam.add_user_to_group(GroupName=os.environ["GROUP_NAME"], UserName=user)
                              print(response)
                              response = create_iam_user_key(user)
                              item = {
                                  "Username": {"S": user},
                                  "access_key": {"S": response["AccessKey"]["AccessKeyId"]},
                                  "secret_key": {"S": response["AccessKey"]["SecretAccessKey"]}
                              }
                              put_ddb_item(item)
                  response = 'SUCCESS'
                  responseData = {}
                  responseData['Data'] = response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
              
              if event['RequestType'] == 'Update':
                  response = 'SUCCESS'
                  responseData = {}
                  responseData['Data'] = response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

              if event['RequestType'] == 'Delete':
                  response = get_ddb_items()
                  for item in response["Items"]:
                      access_key = item["access_key"]["S"]
                      user = item["Username"]["S"]
                      iam.delete_login_profile(UserName=user)
                      iam.delete_access_key(UserName=user, AccessKeyId=access_key)
                      iam.remove_user_from_group(GroupName=os.environ["GROUP_NAME"], UserName=user)
                      iam.delete_user(UserName=user)
                  response = 'SUCCESS'
                  responseData = {}
                  responseData['Data'] = response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

## =================== OUTPUT ===================
Outputs:
  outputName:
    Description: Group name
    Value: !Ref QHackTeamGroup
  outputARN:
    Description: Group ARN
    Value: !GetAtt QHackTeamGroup.Arn
  outputDDBTable:
    Description: IAM User access keys table
    Value: UserAccessKeysTable
  outputUsersPassword:
    Description: IAM Admin and users password
    Value: P@$$w0rd  
  outputAdminUser:
    Description: IAM Admin
    Value: TeamAdmin