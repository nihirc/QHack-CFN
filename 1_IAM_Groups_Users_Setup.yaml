## =================== VERSION ===================
AWSTemplateFormatVersion: '2010-09-09'

## =================== DESCRIPTION ===================
Description: >-
  AWS CloudFormation template 
  Create an IAM user group and IAM users

## =================== PARAMETERS ===================
Parameters:
  paramGroupName:
    Description: Unique IAM user group name
    Type: String
    Default: 'QHackTeam'
  paramAdminUser:
    Description: Administrative user
    Type: String
    Default: QHackTeamAdmin
  paramAdminUserPassword:
    Description: Administrative user password
    Type: String
    Default: P@$$w0rd
  paramUsers:
    Description: Comma separated list of users to be created and added to the QHack Team group. Default password for all users - P@$$w0rd
    Type: String
    Default: UserA, UserB, UserC, UserD
  paramDynamoDBTable:
    Description: DynamoDB table to store IAM users access keys. TTL for generated access keys are 24 hours.
    Type: String
    Default: UserAccessKeysTable
  paramServiceLinkedRole:
    Description: Whether to create service linked role for Amazon Braket. Choose true if you're working first time with Amazon Braket.
    Type: String
    AllowedValues:
      - true
      - false

Conditions:
  isSLR: !Equals [ !Ref paramServiceLinkedRole, true]
  
## =================== RESOURCES ===================
Resources:
  QHackTeamGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      GroupName: !Ref paramGroupName 
      Path: '/'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonBraketFullAccess 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/IAMUserChangePassword
  QHackTeamAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref paramAdminUser
      LoginProfile:
        Password: !Ref paramAdminUserPassword
        PasswordResetRequired: true
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: QHackCFNLambdaRole
      Description: Lambda function role to create IAM users
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
  UserAccessKeysTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: "Username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Username"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Ref paramDynamoDBTable
  BraketServiceLinkedRoleResource:
    Type: AWS::IAM::ServiceLinkedRole
    Condition: isSLR
    Properties:
      AWSServiceName: braket.amazonaws.com
      Description: Service role for Amazon Braket
  CustomResource:
    Type: Custom::CustomResource
    DependsOn:
      - LogGroup
    Properties:
      ServiceToken: !GetAtt IAMUserCreatorLambda.Arn
      Users: !Ref paramUsers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref IAMUserCreatorLambda]]
      RetentionInDays: 7
  IAMUserCreatorLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - QHackTeamGroup
      - UserAccessKeysTable
    Properties:
      FunctionName: IAMUserCreatorFunction
      Description: Lambda function to create IAM users, add them to group and populate DynamoDB with their access keys
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 5
      Environment:
        Variables:
          DDB_TABLE: !Ref paramDynamoDBTable
          GROUP_NAME: !Ref paramGroupName
      Code:
        ZipFile: !Sub |
          import boto3, json
          import logging
          import cfnresponse
          import os
          import time

          logger = logging.getLogger(__name__)
          iam = boto3.client("iam")
          ddb = boto3.client("dynamodb")

          def create_iam_user(user):
              response = iam.create_user(
                  UserName=user
              )
              logger.info(response)
              if response['User']['Arn']:
                  return True
              else:
                  return False

          def create_iam_user_profile(user):
              response = iam.create_login_profile(
                  UserName=user,
                  Password='P@$$w0rd',
                  PasswordResetRequired=True
              )
              logger.info(response)
              if response['LoginProfile']:
                  return True
              else:
                  return False

          def create_iam_user_key(user):
              response = iam.create_access_key(
                  UserName=user
              )
              return response

          def put_ddb_item(item):
              response = ddb.put_item(
                  TableName=os.environ["DDB_TABLE"],
                  Item=item
              )
              logger.info(response)

          def get_ddb_items():
              response = ddb.scan(TableName=os.environ["DDB_TABLE"])
              print(response)
              return response

          def handler(event, context):
              logger.info(json.dumps(event))

              if event['RequestType'] == 'Create':
                  users = event['ResourceProperties']['Users']
                  users = users.split(",")
                  for user in users:
                      user = user.replace(" ", "")
                      if create_iam_user(user):
                          if create_iam_user_profile(user):
                              response = iam.add_user_to_group(GroupName=os.environ["GROUP_NAME"], UserName=user)
                              print(response)
                              response = create_iam_user_key(user)
                              item = {
                                  "Username": {"S": user},
                                  "access_key": {"S": response["AccessKey"]["AccessKeyId"]},
                                  "secret_key": {"S": response["AccessKey"]["SecretAccessKey"]}
                              }
                              put_ddb_item(item)
                  response = 'SUCCESS'
                  responseData = {}
                  responseData['Data'] = response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
              
              if event['RequestType'] == 'Update':
                  response = 'SUCCESS'
                  responseData = {}
                  responseData['Data'] = response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

              if event['RequestType'] == 'Delete':
                  response = get_ddb_items()
                  for item in response["Items"]:
                      access_key = item["access_key"]["S"]
                      user = item["Username"]["S"]
                      iam.delete_login_profile(UserName=user)
                      iam.delete_access_key(UserName=user, AccessKeyId=access_key)
                      iam.remove_user_from_group(GroupName=os.environ["GROUP_NAME"], UserName=user)
                      iam.delete_user(UserName=user)
                  response = 'SUCCESS'
                  responseData = {}
                  responseData['Data'] = response
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

## =================== OUTPUT ===================
Outputs:
  outputName:
    Description: Group name
    Value: !Ref QHackTeamGroup
  outputARN:
    Description: Group ARN
    Value: !GetAtt QHackTeamGroup.Arn
  outputDDBTable:
    Description: IAM User access keys table
    Value: !Ref paramDynamoDBTable    